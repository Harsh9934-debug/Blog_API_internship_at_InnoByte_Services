info:
  title: Blog API
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id: { type: string }
        username: { type: string }
        email: { type: string }
        profilepic: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Post:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        desc: { type: string }
        photo: { type: string, nullable: true }
        categories:
          type: array
          items: { type: string }
        authorId: { type: string }
        username: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Comment:
      type: object
      properties:
        _id: { type: string }
        postId: { type: string }
        content: { type: string }
        authorId: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Category:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
security:
  - bearerAuth: []
paths:
  /api/auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username: { type: string }
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token: { type: string }
  /api/user/{id}:
    get:
      summary: Get user by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    put:
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
    delete:
      summary: Delete user
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/post:
    get:
      summary: List posts
      parameters:
        - in: query
          name: user
          schema: { type: string }
        - in: query
          name: cat
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Post' }
    post:
      summary: Create post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, desc]
              properties:
                title: { type: string }
                desc: { type: string }
                photo: { type: string }
                categories:
                  type: array
                  items: { type: string }
      responses:
        '201': { description: Created }
  /api/post/{id}:
    get:
      summary: Get post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Post' }
    put:
      summary: Update post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
    delete:
      summary: Delete post
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/categories:
    get:
      summary: List categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Category' }
    post:
      summary: Create category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        '200': { description: OK }
  /api/categories/{id}:
    get:
      summary: Get category
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
  /api/comments:
    post:
      summary: Create comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [postId, content]
              properties:
                postId: { type: string }
                content: { type: string }
      responses:
        '201': { description: Created }
  /api/comments/{id}:
    get:
      summary: Get comment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
    put:
      summary: Update comment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
    delete:
      summary: Delete comment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/comments/post/{postId}:
    get:
      summary: List comments for a post
      parameters:
        - in: path
          name: postId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Comment' }
